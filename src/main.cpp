#include <Arduino.h>

#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <SPI.h>

#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/semphr.h>
#include <freertos/queue.h>

//Animaciones
const unsigned char main_image [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x1F, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xEF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xF7, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0x3B, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEA, 0x3B, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE8, 0x3B, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xEE, 0x3B, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFE, 0x1F, 0x7F, 0xFF, 0xFF, 0xEF, 0x3B, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFE, 0x09, 0xFF, 0x7F, 0xFF, 0xFF, 0xF7, 0xF7, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xF9, 0xF7, 0xF9, 0x7F, 0xFF, 0xFF, 0xFB, 0xEF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xF6, 0x2F, 0xF6, 0x7F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xE9, 0xCF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xE7, 0xEF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xEF, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xEF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xEF, 0xFE, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xF7, 0xFC, 0xFF, 0xFB, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xF7, 0xFD, 0xFF, 0xF7, 0xB7, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFE, 0x1B, 0xFD, 0xFF, 0xEF, 0xDB, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFD, 0xEB, 0xFE, 0x3F, 0xE8, 0x6B, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFB, 0xF3, 0xFF, 0x8F, 0xEF, 0xEB, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xF7, 0xFD, 0xFF, 0xEF, 0xE8, 0x6B, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEF, 0xEF, 0xFF, 0xEF, 0xFE, 0xFF, 0xEF, 0xEF, 0xDB, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xE8, 0x2F, 0xFF, 0xEE, 0x1C, 0xFC, 0x2F, 0xF7, 0xB7, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEE, 0xEF, 0xFF, 0xE8, 0x03, 0xFE, 0x8F, 0xFB, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEE, 0xEF, 0xFF, 0xEF, 0xFB, 0xFE, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xE8, 0x2F, 0xFF, 0xDF, 0xFB, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEF, 0xEF, 0xFF, 0xDF, 0xFB, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xBE, 0xEB, 0xEF, 0xFF, 0xDF, 0xFD, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE8, 0x2E, 0xBE, 0xEB, 0xEF, 0xFF, 0xDE, 0x3E, 0xF1, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xEE, 0xEE, 0x82, 0xE8, 0x2F, 0xFF, 0xDF, 0xFE, 0x0E, 0x5F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFB,
0xDF, 0xED, 0xEE, 0xBE, 0xEB, 0xEF, 0xFF, 0xEF, 0xFF, 0x7F, 0x9F, 0xFF, 0xFF, 0xFB, 0xEF, 0xFB,
0xDF, 0xE8, 0x2E, 0xBE, 0xEB, 0xEF, 0xFF, 0xEF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEF, 0xEF, 0xFF, 0xF6, 0x33, 0x7F, 0xFF, 0xFF, 0xFF, 0xEC, 0x7B, 0xFB,
0xDF, 0xE8, 0x6E, 0xC2, 0xEC, 0x2F, 0xFF, 0xFB, 0xC2, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x7B, 0xFB,
0xDF, 0xEF, 0xAE, 0xAE, 0xEA, 0xEF, 0xFF, 0xFC, 0x22, 0xFF, 0xFF, 0xFF, 0xFF, 0xEC, 0x03, 0xFB,
0xDF, 0xEF, 0xAE, 0xAE, 0xEA, 0xEF, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x7B, 0xF9,
0xDF, 0xE8, 0x6E, 0xC2, 0xEC, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEC, 0x7B, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xFB,
0xDF, 0xEB, 0xEE, 0xBA, 0xED, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xEF, 0xFB,
0xDF, 0xEA, 0xEE, 0xAA, 0xEA, 0xAF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x1F, 0xFB,
0xDF, 0xEA, 0xEE, 0xAA, 0xEA, 0xAF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE8, 0x2E, 0x82, 0xE8, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xEF, 0xEE, 0xFE, 0xEF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xE0, 0x0E, 0x00, 0xE0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};



const unsigned char walk_image [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xDF, 0xBF, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xA1, 0xFF, 0xFE, 0xFD, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xFE, 0xFD, 0x87, 0xFF, 0xFF, 0xFF, 0x7F, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0x3F, 0xFF, 0xFC, 0xF0, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDE, 0x7F, 0xFF, 0xF9, 0x80, 0x18, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDC, 0xEF, 0xFF, 0xFB, 0x80, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xD9, 0xF7, 0xFF, 0xFB, 0x80, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xC3, 0xFB, 0xFF, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0x7F, 0xFF, 0xF7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xD7, 0xBF, 0xFF, 0xF7, 0x80, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xD7, 0xDF, 0xFF, 0xF7, 0x80, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xD7, 0xFF, 0xFF, 0xF7, 0x80, 0x18, 0x7F, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xEF, 0xFF, 0xFB,
0xD7, 0xFF, 0xFF, 0xF3, 0xF8, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF8, 0xFB, 0x87, 0xFF, 0xFF, 0xFF, 0xC0, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0xFB, 0x9F, 0xFF, 0xFF, 0xFE, 0x1F, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0xFB, 0xFF, 0xFF, 0xFE, 0x09, 0xFF, 0x67, 0xFF, 0xFF, 0xEF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xF9, 0xF7, 0xF9, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xF6, 0x2F, 0xF6, 0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xE9, 0xCF, 0xF7, 0xF7, 0xFF, 0xB7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFF, 0xFF, 0xE7, 0xEF, 0xF3, 0xF7, 0xFF, 0xAB, 0xEF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFE, 0x3E, 0x3D, 0xFF, 0xFF, 0xFF, 0xEF, 0xF8, 0xE7, 0xFF, 0xAB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF8, 0xBF, 0xBD, 0xFF, 0xFF, 0xFF, 0xEF, 0xFE, 0xD7, 0xFF, 0xDB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF3, 0xBF, 0xBD, 0xFF, 0xFF, 0xFF, 0xEF, 0xFE, 0xE7, 0xFF, 0xFE, 0xEF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF7, 0xBF, 0x9B, 0xFF, 0xFF, 0xFF, 0xF7, 0xFC, 0xF7, 0xFF, 0xFF, 0x5F, 0xFF, 0xFB,
0xDF, 0xFF, 0xF7, 0xBF, 0xC3, 0xFF, 0xFF, 0xFF, 0xF7, 0xFD, 0xF7, 0xFF, 0x9F, 0xBF, 0xFF, 0xFB,
0xDF, 0xFF, 0x17, 0x9F, 0xFF, 0xFF, 0xFF, 0xFE, 0x1B, 0xFD, 0xF7, 0xFF, 0xFE, 0x0F, 0xFF, 0xFB,
0xDF, 0xFF, 0x4F, 0xDF, 0xFF, 0xFF, 0xFF, 0xFD, 0xEB, 0xFE, 0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFE, 0x7F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFB, 0xF3, 0xFF, 0x87, 0xFF, 0xBF, 0xEF, 0xFF, 0xFB,
0xDF, 0xFE, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFD, 0xFF, 0xE7, 0xFF, 0xBF, 0xEF, 0xFF, 0xFB,
0xDF, 0xFE, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFE, 0xFF, 0xE7, 0xFF, 0x83, 0xEF, 0xFF, 0xFB,
0xDF, 0xFE, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xEE, 0x1C, 0x7C, 0x27, 0xFF, 0xBE, 0x0F, 0xFF, 0xFB,
0xDF, 0xFC, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xE8, 0x03, 0x3E, 0x87, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF9, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFB, 0xBE, 0xF7, 0xFF, 0xFF, 0x0F, 0xFF, 0xFB,
0xDF, 0xFB, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFB, 0x8E, 0xF7, 0xFF, 0xBA, 0xBF, 0xFF, 0xFB,
0xDF, 0xFB, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFB, 0x8C, 0x37, 0xFF, 0xAA, 0xBF, 0xFF, 0xFB,
0xDF, 0xFB, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xDF, 0xFD, 0xBF, 0xD7, 0xFF, 0xAB, 0x0F, 0xFF, 0xFB,
0xDF, 0xFB, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xDE, 0x3E, 0xB1, 0xD7, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFD, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xDF, 0xFE, 0x0E, 0x57, 0xFF, 0xFE, 0x0F, 0xFF, 0xFB,
0xDF, 0xFC, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0x7F, 0x97, 0xFF, 0xFB, 0xDF, 0xFF, 0xFB,
0xDF, 0xFE, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0x7F, 0xF7, 0xFF, 0xFB, 0xBF, 0xFF, 0xFB,
0xDF, 0xFF, 0xBF, 0xEF, 0xFF, 0xFF, 0xFF, 0xF6, 0x33, 0x7F, 0xE7, 0xFF, 0xFB, 0xDF, 0xFF, 0xFB,
0xDF, 0xFF, 0x3F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFB, 0xC2, 0xFF, 0xD7, 0xFF, 0x82, 0x0F, 0xFF, 0xFB,
0xDF, 0xFF, 0x7F, 0xCF, 0xFF, 0xFF, 0xFF, 0xFC, 0x22, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0x7F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9,
0xDF, 0xFF, 0xBF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0x9F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xC7, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF7, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF3, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};


const unsigned char bath_image [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xC0, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD6, 0x1F, 0x7F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFF, 0xFF, 0xFE, 0x11, 0xFF, 0x7F, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xCB, 0xFF, 0xFF, 0xF9, 0xB7, 0xF9, 0x7F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0x9B, 0xFF, 0xFF, 0xF6, 0x2F, 0xB6, 0x7F, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0x3B, 0xFF, 0xFF, 0xE9, 0x2F, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0x7B, 0x01, 0xFF, 0xE7, 0x8E, 0x53, 0xFF, 0xFF, 0xBB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFF, 0xFF, 0xFF, 0xEE, 0xD8, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF9, 0xFB, 0xFF, 0xFF, 0xFF, 0xEE, 0x5E, 0xFF, 0xFF, 0xBB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF3, 0xFB, 0xFF, 0xFF, 0xFF, 0xEF, 0x9E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xE7, 0xFB, 0xFF, 0xE0, 0xFF, 0xF7, 0xFC, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xCF, 0xFB, 0xFF, 0xFF, 0xFF, 0xF7, 0xFD, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xDF, 0xFB, 0xFF, 0xFF, 0xFE, 0x1B, 0xFD, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0x9F, 0xFB, 0xFF, 0xFF, 0xFD, 0xEB, 0xFE, 0x3F, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x3F, 0xFB, 0xFF, 0xFF, 0xFB, 0xF3, 0xCF, 0x8F, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x3F, 0xFB, 0xE0, 0x7F, 0xF7, 0xFD, 0x87, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0x9F, 0xFB, 0xFF, 0xFF, 0xEF, 0xFE, 0xB7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xDF, 0xFB, 0xFF, 0xFF, 0xEE, 0x1D, 0xA4, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xCF, 0xFB, 0xFF, 0xFF, 0x04, 0x03, 0x8E, 0x8F, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xE7, 0xFB, 0xFF, 0xFF, 0x77, 0xFB, 0xFE, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF3, 0xFB, 0xFF, 0xFE, 0x77, 0xFB, 0xFE, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF9, 0xFB, 0xFF, 0x0E, 0xF7, 0xFB, 0xFC, 0x3F, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFF, 0xFE, 0xF3, 0xFD, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFE, 0x7B, 0x83, 0xFE, 0xFA, 0x3E, 0xF1, 0xDF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0x3B, 0xFF, 0xFD, 0xF3, 0xFE, 0x0E, 0x5F, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0x9B, 0xFF, 0xF9, 0xFB, 0xFF, 0x7F, 0x9F, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xCB, 0xFF, 0xFC, 0xFB, 0xFF, 0x7F, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFF, 0xFE, 0xFA, 0x33, 0x7F, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF3, 0xC2, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xE4, 0x22, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6F, 0xF1, 0xFF, 0xFF, 0xFF, 0xAF, 0xFF, 0xFF, 0xF9,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const unsigned char eat_image [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF0, 0x7F, 0xFF, 0xFE, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFE, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFF, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xC5, 0xFF, 0xFF, 0xFB,
0xDF, 0xF4, 0x7F, 0xFF, 0xF9, 0xFF, 0x78, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF4, 0x7F, 0xFF, 0xF3, 0xFF, 0x7B, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF0, 0x7F, 0xFF, 0xF7, 0xFF, 0x7B, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF4, 0x7F, 0xFF, 0xF3, 0xFF, 0x7B, 0xFF, 0xFF, 0xC0, 0xF7, 0xFF, 0xC5, 0xFF, 0xFF, 0xFB,
0xDF, 0xF4, 0x7F, 0xFF, 0xF9, 0xFF, 0x7B, 0xFF, 0xFE, 0x1F, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFC, 0x00, 0x7B, 0xFE, 0x09, 0xFF, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFF, 0xFF, 0x7B, 0xF9, 0xF7, 0xF9, 0x77, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xFF, 0xFF, 0xFF, 0x78, 0xF6, 0x2F, 0xF6, 0x77, 0xFF, 0xC5, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xF8, 0x00, 0x00, 0x7F, 0xE9, 0xCF, 0xF7, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xF3, 0xFF, 0xFF, 0x7F, 0xE7, 0xEF, 0xF3, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF7, 0x7F, 0xEF, 0xFF, 0xFF, 0x7F, 0xFF, 0xEF, 0xF8, 0xF7, 0xFF, 0xCF, 0xFF, 0xFF, 0xFB,
0xDF, 0xF0, 0x7F, 0xEF, 0xFF, 0xFF, 0x7F, 0xFF, 0xEF, 0xFE, 0xF7, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0x7F, 0xFF, 0xEF, 0xFE, 0xF7, 0xFF, 0xF1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x7F, 0xFF, 0xF7, 0xFC, 0xF7, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xF7, 0xFD, 0xF7, 0xFF, 0xCF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFE, 0x1B, 0xFD, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFD, 0xEB, 0xFE, 0x37, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFB, 0xF3, 0xFF, 0x87, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x07, 0xFD, 0xFF, 0xE7, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xC0, 0x00, 0x3F, 0xFF, 0xFF, 0x7F, 0xEF, 0xFE, 0xFF, 0xE7, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xEE, 0x1C, 0xFC, 0x27, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xE8, 0x03, 0xFE, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xEF, 0xFB, 0xFE, 0xF7, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xDF, 0xFB, 0xFE, 0xF7, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xDF, 0xFB, 0xFC, 0x37, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xDF, 0xFD, 0xFF, 0xD7, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xDE, 0x3E, 0xF1, 0xD7, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xDF, 0xFE, 0x0E, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFE, 0x1F, 0xFF, 0xFF, 0x7F, 0xEF, 0xFF, 0x7F, 0x97, 0xFF, 0xC3, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFE, 0x1F, 0xFF, 0xFF, 0x71, 0xEF, 0xFF, 0x7F, 0xF7, 0xFF, 0xFD, 0xFF, 0xFF, 0xFB,
0xDF, 0x80, 0x00, 0x1F, 0xFF, 0xFF, 0x77, 0xF6, 0x33, 0x7F, 0xF7, 0xFF, 0xFD, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFE, 0x1F, 0xFF, 0xFF, 0x77, 0xFB, 0xC2, 0xFF, 0xF7, 0xFF, 0xC3, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFE, 0x1F, 0xFF, 0xFF, 0x77, 0xFC, 0x22, 0xFF, 0x17, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x77, 0xFF, 0xF1, 0xFC, 0x57, 0xFF, 0xCF, 0xFF, 0xFF, 0xF9,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x77, 0xFF, 0xFF, 0xF0, 0xC7, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x77, 0xFF, 0xFF, 0xE6, 0x67, 0xFF, 0xF1, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x71, 0xFF, 0xFF, 0xED, 0x67, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xEF, 0x67, 0xFF, 0xCF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xEA, 0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xEF, 0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xBF, 0xFF, 0xDF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xE6, 0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xC0, 0x00, 0x3F, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xF0, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFC, 0x57, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x17, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};



const unsigned char death [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x09, 0xFF, 0x7F, 0xFF, 0xE3, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xF7, 0xF9, 0x7F, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xF6, 0x2E, 0x76, 0x7F, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1D, 0xFF, 0xE9, 0xCF, 0x37, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFD, 0xFF, 0xE7, 0xEF, 0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0x00, 0x0F, 0xFB, 0xFF, 0xFF, 0xEF, 0xF8, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xEE, 0x7E, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFB, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xEF, 0x1E, 0xFF, 0xFF, 0xD7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF3, 0xCF, 0xFF, 0xF3, 0xFF, 0xFF, 0xF7, 0xCC, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF7, 0xB7, 0xFF, 0xFD, 0xFF, 0xFF, 0xF7, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xEF, 0xB7, 0xFF, 0xFD, 0xFF, 0xFE, 0x1B, 0x3D, 0xFF, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xEF, 0xCF, 0x07, 0xF9, 0xFF, 0xFD, 0xEB, 0x8E, 0x3F, 0xFF, 0xD5, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xEF, 0xFE, 0xFB, 0xF7, 0xFF, 0xFB, 0xF3, 0xE7, 0x8F, 0xFF, 0xD5, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xEF, 0xFE, 0xFB, 0xF7, 0xFF, 0xF7, 0xFD, 0xFF, 0xEF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xEF, 0xCF, 0x07, 0xF9, 0xFF, 0xEF, 0xFE, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xEF, 0xB7, 0xFF, 0xFD, 0xFF, 0xEE, 0x1C, 0xFC, 0x2F, 0xFF, 0xE3, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF7, 0xB7, 0xFF, 0xFD, 0xFF, 0xE8, 0x03, 0xFE, 0x8F, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xF3, 0xCF, 0xFF, 0xF3, 0xFF, 0xEF, 0xFB, 0xFE, 0xFF, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFB, 0xFF, 0xFF, 0xF7, 0xFF, 0xDF, 0xFB, 0xFE, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFB, 0xFF, 0xDE, 0xBB, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0x00, 0x0F, 0xFB, 0xFF, 0xDF, 0x7D, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFD, 0xFF, 0xDE, 0xBE, 0xF1, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1D, 0xFF, 0xDF, 0xFE, 0x0E, 0x5F, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xEE, 0xBF, 0x7F, 0x9F, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x7F, 0x7F, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xB3, 0x7F, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xC2, 0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x22, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};




//parametros de la pantalla
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64 
#define WIRE Wire

#define SCREEN_ADDRESS 0x3C 
Adafruit_SSD1306 display = Adafruit_SSD1306(SCREEN_WIDTH, SCREEN_HEIGHT, &WIRE);

//parametros del MPU
Adafruit_MPU6050 mpu;

//pines de los botones

#define EatButton 19
#define WalkButton 18
#define BathButton 5
#define WIRE Wire

//cola boton
QueueHandle_t queueBotton;
QueueHandle_t queueComida;
QueueHandle_t queueWalk;

//Semaforo para actualizar datos
SemaphoreHandle_t dataSema;
SemaphoreHandle_t barraSema;

// funciones
void Pant(void *pvParameters);
void Bath(void *pvParameters);
void Eat(void *pvParameters);
void walk(void *pvParameters);



//parametros para caminar
int pasos = 0;
int iniciar = 0; 
int contar = 0;
int shake = 0;

// Stats de la mascota
int hunger = 60;
int fun = 80;
int bath = 50;


int one = 0;
int two = 0;
int three = 0;


void Pant(void *pvParameters){
  int buttonReceived = 0;

  while(1) {

    if (xQueueReceive(queueBotton,&buttonReceived,portMAX_DELAY)){
      Serial.println(buttonReceived);
        if (buttonReceived == 1){
        display.clearDisplay();
        display.setCursor(0, 0);
        display.drawBitmap(0, 0, eat_image, 128, 64,1);
        display.invertDisplay(true);
        display.display(); 
        int dateat = 1;
        xQueueSend(queueComida, &dateat, portMAX_DELAY);
        delay(3000);
        int data1 = 0;
        xQueueSend(queueBotton, &data1, portMAX_DELAY);

        }
        else if (buttonReceived == 2){
        display.clearDisplay();
        display.setCursor(0, 0);
        display.drawBitmap(0, 0, walk_image, 128, 64,1);
        display.invertDisplay(true);
        display.display();

        int datwalk = 2;
        xQueueSend(queueWalk, &datwalk, portMAX_DELAY);
        }

        else if (buttonReceived == 3){
        display.clearDisplay();
        display.setCursor(0, 0);
        display.drawBitmap(0, 0, bath_image, 128, 64,1);
        display.invertDisplay(true);
        display.display();

        }
        else if (buttonReceived == 0){
          display.clearDisplay();
          display.setTextSize(0.5);
          display.setCursor(0, 0);
          display.drawBitmap(0, 0, main_image, 128, 64,1);

          xSemaphoreTake(barraSema,portMAX_DELAY);
          if (fun > 0 && hunger > 10 && bath > 10){
            one = round((fun*20)/100);
            two = round((hunger*20)/100);
            three = round((bath*20)/100);
            }
          else if (fun <= 0 && hunger <= 10 && bath <= 10){
            one = 0;
            two = 0;
            three = 0;
          }
          xSemaphoreGive(barraSema);

          display.drawRect(12, 10, 7, one,SSD1306_WHITE);//FUN
          display.fillRect(12, 10, 7, one,SSD1306_WHITE);

          display.drawRect(24, 10, 7, two,SSD1306_WHITE);//EAT	
          display.fillRect(24, 10, 7, two,SSD1306_WHITE);

          display.drawRect(36, 10, 7, three,SSD1306_WHITE);//BATH
          display.fillRect(36, 10, 7, three,SSD1306_WHITE);

          display.invertDisplay(true);
          display.display();
    }
    else if (buttonReceived == 4){
          display.clearDisplay();
          display.setTextSize(0.5);
          display.setCursor(0, 0);
          display.drawBitmap(0, 0, death, 128, 64,1);
          display.display();
    }
    }
  }}


void walk(void *parameter) { 
  int buttonReceived = 0; 
  int dataSend = 0;

  while(1) {
    if (xQueueReceive(queueWalk,&buttonReceived,portMAX_DELAY)){
      if (buttonReceived == 2){
        sensors_event_t a, g, temp;
        mpu.getEvent(&a, &g, &temp);
        Serial.println(a.acceleration.y);

          if (contar == 0 && a.acceleration.y > 8 && fun<100){
              pasos = pasos + 1;
              xSemaphoreTake(dataSema,portMAX_DELAY);
              fun = fun + pasos; 
              xSemaphoreGive(dataSema);
              Serial.print("PASOS");
              Serial.println(pasos);  
          }

          if (contar==1 && (a.acceleration.y) < 8 ){
              contar = 0; 
          }
          if (pasos >= 5 || fun >= 100){
            pasos = 0;
            xQueueSend(queueBotton, &dataSend, portMAX_DELAY);
          }
        }
      }
      } 
}

void Eat(void *pvParameters){
  int buttonReceived = 0;
  while(1) {
    if (xQueueReceive(queueComida,&buttonReceived,portMAX_DELAY)){
      if (buttonReceived == 1){
        
        if (hunger < 90 ){
        xSemaphoreTake(dataSema,portMAX_DELAY);
        hunger = hunger + 20;
        xSemaphoreGive(dataSema);

        int dataeat = 0;
        xQueueSend(queueComida,&dataeat,portMAX_DELAY);

        }
      }
    }
  }
}

void Bath(void *pvParameters){
  int buttonReceived = 0;
  while(1) {
    if (xQueueReceive(queueBotton,&buttonReceived,portMAX_DELAY)){
      if (buttonReceived == 3){
        sensors_event_t a, g, temp;
        mpu.getEvent(&a, &g, &temp);
        Serial.println(g.gyro.x);
        
          if (contar == 0 && g.gyro.x > 1 && bath<100){
              xSemaphoreTake(dataSema,portMAX_DELAY);
              shake = shake + 1;
              bath += shake;
              xSemaphoreGive(dataSema);
              contar=1;  
              Serial.print("SHAKES");
              Serial.println(shake);  
          }

          if (contar==1){
              contar = 0; 

          if (shake >=5 || bath >= 100){
              int data3 = 0;
              xQueueSend(queueBotton, &data3, portMAX_DELAY);    
          }
      }
    }
  }
}}


void Indi(void *pvParameters){
  while(1) {
    xSemaphoreTake(dataSema, portMAX_DELAY);
    hunger -= 1;
    fun -= 1;
    bath -= 1;

    if (hunger <= 0 && fun <= 0 && bath <= 0){
      int data1 = 4;
      Serial.println("MUERE");
      xQueueSend(queueBotton, &data1, portMAX_DELAY);
    } 
    else if (hunger >= 0 && fun >= 0 && bath >= 0){
      Serial.println("vive");
      int data1 = 0;
      xQueueSend(queueBotton, &data1, portMAX_DELAY);
    }

    xSemaphoreGive(dataSema);
    vTaskDelay(pdMS_TO_TICKS(10000)); 
  }
}


void Eat_Interrupt()
{
  static unsigned long e_last_interrupt_time = 0;
  unsigned long e_interrupt_time = millis();
  if (e_interrupt_time - e_last_interrupt_time > 100)
  {
      int dataEat = 1;
      xQueueSend(queueBotton, &dataEat, portMAX_DELAY);
  }
  e_last_interrupt_time = e_interrupt_time;
}

void Walk_Interrupt()
{
  static unsigned long w_last_interrupt_time = 0;
  unsigned long w_interrupt_time = millis();
  if (w_interrupt_time - w_last_interrupt_time > 100)
  {
      int dataWalk = 2;
      xQueueSend(queueBotton, &dataWalk, portMAX_DELAY);
    
  }
  w_last_interrupt_time = w_interrupt_time;
}

void Bath_Interrupt()
{
  static unsigned long b_last_interrupt_time = 0;
  unsigned long b_interrupt_time = millis();
  if (b_interrupt_time - b_last_interrupt_time > 100)
  {
      int dataBath = 3;
      xQueueSend(queueBotton, &dataBath, portMAX_DELAY);
  }
  b_last_interrupt_time = b_interrupt_time;
}


void setup() {
  Serial.begin(9600);

  // Initialize the display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(200);
  display.setRotation(2);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(5, 0);
  display.println("Bienvenido");
  display.display();
  delay(1000);
  display.clearDisplay();
  display.clearDisplay();
  display.setCursor(0, 0);
  display.drawBitmap(0, 0, main_image, 128, 64,1);

  display.drawRect(12, 10, 7, 20,SSD1306_WHITE);//FUN
  display.fillRect(12, 10, 7, 20,SSD1306_WHITE);

  display.drawRect(24, 10, 7, 20,SSD1306_WHITE);//EAT	
  display.fillRect(24, 10, 7, 20,SSD1306_WHITE);

  display.drawRect(36, 10, 7, 20,SSD1306_WHITE);//BATH
  display.fillRect(36, 10, 7, 20,SSD1306_WHITE);

  display.invertDisplay(true);
  display.display();
  
  mpu.begin();
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);

  // Pines para botones
  pinMode(EatButton, INPUT_PULLUP);
  pinMode(WalkButton, INPUT_PULLUP);
  pinMode(BathButton, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(EatButton), Eat_Interrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(WalkButton), Walk_Interrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(BathButton), Bath_Interrupt, FALLING);

  //Cola para botones
  queueBotton = xQueueCreate(1,sizeof(int));
  queueComida = xQueueCreate(1,sizeof(int));
  queueWalk = xQueueCreate(1,sizeof(int));


  //Semaforo comer
  dataSema = xSemaphoreCreateMutex();
  barraSema = xSemaphoreCreateMutex();

  //Creacion de los tasks
  xTaskCreate(Pant," Pantalla", 8096, NULL, 1, NULL);  
  xTaskCreate(Eat," Eat", 8096, NULL, 1, NULL); 
  xTaskCreate(walk," walk", 8096, NULL, 1, NULL); 
  xTaskCreate(Bath," Bath", 8096, NULL, 1, NULL); 
  xTaskCreate(Indi,"Indicadores", 8096, NULL, 1, NULL); 

}

void loop() {
}